/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SellerService } from "../seller.service";
import { SellerCreateInput } from "./SellerCreateInput";
import { Seller } from "./Seller";
import { SellerFindManyArgs } from "./SellerFindManyArgs";
import { SellerWhereUniqueInput } from "./SellerWhereUniqueInput";
import { SellerUpdateInput } from "./SellerUpdateInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";

export class SellerControllerBase {
  constructor(protected readonly service: SellerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Seller })
  async createSeller(@common.Body() data: SellerCreateInput): Promise<Seller> {
    return await this.service.createSeller({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Seller] })
  @ApiNestedQuery(SellerFindManyArgs)
  async sellers(@common.Req() request: Request): Promise<Seller[]> {
    const args = plainToClass(SellerFindManyArgs, request.query);
    return this.service.sellers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Seller })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async seller(
    @common.Param() params: SellerWhereUniqueInput
  ): Promise<Seller | null> {
    const result = await this.service.seller({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Seller })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSeller(
    @common.Param() params: SellerWhereUniqueInput,
    @common.Body() data: SellerUpdateInput
  ): Promise<Seller | null> {
    try {
      return await this.service.updateSeller({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Seller })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSeller(
    @common.Param() params: SellerWhereUniqueInput
  ): Promise<Seller | null> {
    try {
      return await this.service.deleteSeller({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/products")
  @ApiNestedQuery(ProductFindManyArgs)
  async findProducts(
    @common.Req() request: Request,
    @common.Param() params: SellerWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProducts(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        image: true,
        name: true,
        price: true,
        quantity: true,

        seller: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/products")
  async connectProducts(
    @common.Param() params: SellerWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        connect: body,
      },
    };
    await this.service.updateSeller({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/products")
  async updateProducts(
    @common.Param() params: SellerWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        set: body,
      },
    };
    await this.service.updateSeller({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/products")
  async disconnectProducts(
    @common.Param() params: SellerWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        disconnect: body,
      },
    };
    await this.service.updateSeller({
      where: params,
      data,
      select: { id: true },
    });
  }
}
